{"version":3,"sources":["components/navbar.js","components/recordList.js","components/edit.js","components/create.js","App.js","index.js"],"names":["Navbar","className","to","style","src","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Record","props","record","name","intro","_id","onClick","deleteRecord","RecordList","useState","records","setRecords","a","fetch","method","newRecords","filter","el","useEffect","response","ok","message","statusText","window","alert","json","getRecords","length","marginTop","map","Edit","form","setForm","params","useParams","navigate","useNavigate","updateForm","value","prev","e","preventDefault","editedPerson","body","JSON","stringify","headers","toString","fetchData","onSubmit","htmlFor","onChange","target","Create","newPerson","catch","error","App","margin","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73e95f6c.chunk.js","sourcesContent":["import React from \"react\";\n\n// We import bootstrap to make our application look better.\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// We import NavLink to utilize the react router.\nimport { NavLink } from \"react-router-dom\";\n\n// Here, we display our Navbar\nexport default function Navbar() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <NavLink className=\"navbar-brand\" to=\"/\">\n        <img style={{\"width\" : 25 + '%'}} src=\"https://d3cy9zhslanhfa.cloudfront.net/media/3800C044-6298-4575-A05D5C6B7623EE37/4B45D0EC-3482-4759-82DA37D8EA07D229/webimage-8A27671A-8A53-45DC-89D7BF8537F15A0D.png\"></img>\n        </NavLink>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to=\"/create\">\n                Create Record\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Record = (props) => (\n  <tr>\n    <td>{props.record.name}</td>\n    <td>{props.record.intro}</td>\n    <td>\n      <Link className=\"btn btn-link\" to={`/edit/${props.record._id}`}>Edit</Link> |\n      <button className=\"btn btn-link\"\n        onClick={() => {\n          props.deleteRecord(props.record._id);\n        }}\n      >\n        Delete\n      </button>\n    </td>\n  </tr>\n);\n\nexport default function RecordList() {\n  const [records, setRecords] = useState([]);\n\n  // This method fetches the records from the database.\n  useEffect(() => {\n    async function getRecords() {\n      const response = await fetch(`http://localhost:5000/record/`);\n\n      if (!response.ok) {\n        const message = `An error occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const records = await response.json();\n      setRecords(records);\n    }\n\n    getRecords();\n\n    return; \n  }, [records.length]);\n\n  // This method will delete a record\n  async function deleteRecord(id) {\n    await fetch(`http://localhost:5000/${id}`, {\n      method: \"DELETE\"\n    });\n\n    const newRecords = records.filter((el) => el._id !== id);\n    setRecords(newRecords);\n  }\n\n  // This method will map out the records on the table\n  function recordList() {\n    return records.map((record) => {\n      return (\n        <Record\n          record={record}\n          deleteRecord={() => deleteRecord(record._id)}\n          key={record._id}\n        />\n      );\n    });\n  }\n\n  // This following section will display the table with the records of individuals.\n  return (\n    <div>\n      <h3>Record List</h3>\n      <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>intro</th>\n          </tr>\n        </thead>\n        <tbody>{recordList()}</tbody>\n      </table>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\n\nexport default function Edit() {\n  const [form, setForm] = useState({\n    name: \"\",\n    intro: \"\",\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:5000/record/${params.id.toString()}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      setForm(record);\n    }\n\n    fetchData();\n\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    const editedPerson = {\n      name: form.name,\n      intro: form.intro,\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:5000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return (\n    <div>\n      <h3>Update Record</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={form.name}\n            onChange={(e) => updateForm({ name: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"intro\">intro: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"intro\"\n            value={form.intro}\n            onChange={(e) => updateForm({ intro: e.target.value })}\n          />\n        </div>\n        \n        <br />\n\n        <div className=\"form-group\">\n          <input\n            type=\"submit\"\n            value=\"Update Record\"\n            className=\"btn btn-primary\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\n\nexport default function Create() {\n  const [form, setForm] = useState({\n    name: \"\",\n    intro: \"\",\n  });\n  const navigate = useNavigate();\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  // This function will handle the submission.\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    // When a post request is sent to the create url, we'll add a new record to the database.\n    const newPerson = { ...form };\n\n    await fetch(\"http://localhost:5000/record/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newPerson),\n    })\n    .catch(error => {\n      window.alert(error);\n      return;\n    });\n\n    setForm({ name: \"\", intro: \"\"});\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes the input from the user.\n  return (\n    <div>\n      <h3>Create New Record</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">name</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={form.name}\n            onChange={(e) => updateForm({ name: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"intro\">intro</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"intro\"\n            value={form.intro}\n            onChange={(e) => updateForm({ intro: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"submit\"\n            value=\"Create person\"\n            className=\"btn btn-primary\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\n// We use Route in order to define the different routes of our application\nimport { Route, Routes } from \"react-router-dom\";\n\n// We import all the components we need in our app\nimport Navbar from \"./components/navbar\";\nimport RecordList from \"./components/recordList\";\nimport Edit from \"./components/edit\";\nimport Create from \"./components/create\";\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <div style={{ margin: 20 }}>\n      <Routes>\n        <Route exact path=\"/\" element={<RecordList />} />\n        <Route path=\"/edit/:id\" element={<Edit />} />\n        <Route path=\"/create\" element={<Create />} />\n      </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}