{"ast":null,"code":"import _objectSpread from\"D:/vs-workspace/mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"D:/vs-workspace/mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/vs-workspace/mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/vs-workspace/mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{useParams,useNavigate}from\"react-router\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Edit(){var _useState=useState({name:\"\",intro:\"\"}),_useState2=_slicedToArray(_useState,2),form=_useState2[0],setForm=_useState2[1];var params=useParams();var navigate=useNavigate();useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var id,response,message,record;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:id=params.id.toString();_context.next=3;return fetch(\"http://localhost:5000/record/\".concat(params.id.toString()));case 3:response=_context.sent;if(response.ok){_context.next=8;break;}message=\"An error has occured: \".concat(response.statusText);window.alert(message);return _context.abrupt(\"return\");case 8:_context.next=10;return response.json();case 10:record=_context.sent;if(record){_context.next=15;break;}window.alert(\"Record with id \".concat(id,\" not found\"));navigate(\"/\");return _context.abrupt(\"return\");case 15:setForm(record);case 16:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();return;},[params.id,navigate]);// These methods will update the state properties.\nfunction updateForm(value){return setForm(function(prev){return _objectSpread(_objectSpread({},prev),value);});}function onSubmit(_x){return _onSubmit.apply(this,arguments);}// This following section will display the form that takes input from the user to update the data.\nfunction _onSubmit(){_onSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var editedPerson;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:e.preventDefault();editedPerson={name:form.name,intro:form.intro};// This will send a post request to update the data in the database.\n_context2.next=4;return fetch(\"http://localhost:5000/update/\".concat(params.id),{method:\"POST\",body:JSON.stringify(editedPerson),headers:{'Content-Type':'application/json'}});case 4:navigate(\"/\");case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _onSubmit.apply(this,arguments);}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Update Record\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:onSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",children:\"Name: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",id:\"name\",value:form.name,onChange:function onChange(e){return updateForm({name:e.target.value});}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"intro\",children:\"intro: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",id:\"intro\",value:form.intro,onChange:function onChange(e){return updateForm({intro:e.target.value});}})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Update Record\",className:\"btn btn-primary\"})})]})]});}","map":{"version":3,"sources":["D:/vs-workspace/mern/client/src/components/edit.js"],"names":["React","useState","useEffect","useParams","useNavigate","Edit","name","intro","form","setForm","params","navigate","fetchData","id","toString","fetch","response","ok","message","statusText","window","alert","json","record","updateForm","value","prev","onSubmit","e","preventDefault","editedPerson","method","body","JSON","stringify","headers","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\n\nexport default function Edit() {\n  const [form, setForm] = useState({\n    name: \"\",\n    intro: \"\",\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:5000/record/${params.id.toString()}`);\n\n      if (!response.ok) {\n        const message = `An error has occured: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const record = await response.json();\n      if (!record) {\n        window.alert(`Record with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n\n      setForm(record);\n    }\n\n    fetchData();\n\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm((prev) => {\n      return { ...prev, ...value };\n    });\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    const editedPerson = {\n      name: form.name,\n      intro: form.intro,\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:5000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedPerson),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return (\n    <div>\n      <h3>Update Record</h3>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"name\"\n            value={form.name}\n            onChange={(e) => updateForm({ name: e.target.value })}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"intro\">intro: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"intro\"\n            value={form.intro}\n            onChange={(e) => updateForm({ intro: e.target.value })}\n          />\n        </div>\n        \n        <br />\n\n        <div className=\"form-group\">\n          <input\n            type=\"submit\"\n            value=\"Update Record\"\n            className=\"btn btn-primary\"\n          />\n        </div>\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}